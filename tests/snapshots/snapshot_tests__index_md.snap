---
source: tests/snapshot_tests.rs
expression: index_content
---
import RustCode from '@site/src/components/RustCode';
import Link from '@docusaurus/Link';

# Crate test_crate

# Test Crate

A comprehensive test crate demonstrating all Rust documentation features.

This crate serves as a test fixture for `cargo-doc-md` and demonstrates:

- **Structs**: Plain, tuple, unit, generic, with methods
- **Enums**: Simple and complex variants
- **Traits**: With associated types, constants, default implementations
- **Functions**: Including async, generic, const, and unsafe
- **Lifetimes**: Explicit lifetime parameters and bounds
- **Patterns**: Builder, newtype, typestate, visitor
- **Error handling**: Custom error types with `std::error::Error`
- **Documentation**: Rich markdown with examples, links, and code blocks

## Quick Start

```rust
use test_crate::{PlainStruct, Builder};

let item = PlainStruct::new("example".to_string(), 42);
assert_eq!(item.get_value(), 42);

let built = Builder::new()
    .name("test".to_string())
    .value(100)
    .build()
    .unwrap();
```

## Module Organization

- [`types`] - Type definitions including containers and enums
- [`functions`] - Various function signatures and examples
- [`traits`] - Advanced trait definitions with associated types
- [`lifetimes`] - Lifetime parameter examples
- [`patterns`] - Common Rust design patterns
- [`async_example`] - Async/await functionality
- [`errors`] - Error handling patterns
- [`nested`] - Nested module hierarchy example

## Feature Flags

This crate has no feature flags but demonstrates documentation of them.

## Safety

This crate contains `unsafe` code examples for documentation purposes only.

## Re-exports

<RustCode inline code={`pub use patterns::Builder;`} links={[{"text": "Builder", "href": "/test_crate/patterns/struct.Builder"}]} />

<RustCode inline code={`pub use patterns::Newtype;`} links={[{"text": "Newtype", "href": "/test_crate/patterns/struct.Newtype"}]} />

<RustCode inline code={`pub use errors::CustomError;`} links={[{"text": "CustomError", "href": "/test_crate/errors/enum.CustomError"}]} />

## Modules

<div><Link to="async_example/" className="rust-mod">async_example</Link></div>

<div><Link to="errors/" className="rust-mod">errors</Link></div>

<div><Link to="functions/" className="rust-mod">functions</Link> — Function examples demonstrating various signatures and patterns.</div>

<div><Link to="lifetimes/" className="rust-mod">lifetimes</Link></div>

<div><Link to="nested/" className="rust-mod">nested</Link> — Demonstrates nested module hierarchies.</div>

<div><Link to="patterns/" className="rust-mod">patterns</Link></div>

<div><Link to="traits/" className="rust-mod">traits</Link></div>

<div><Link to="types/" className="rust-mod">types</Link> — Type definitions and containers.</div>

## Structs

<div><Link to="struct.BoundedGeneric" className="rust-struct">BoundedGeneric</Link> </div>

<div><Link to="struct.Error" className="rust-struct">Error</Link> </div>

<div><Link to="struct.GenericStruct" className="rust-struct">GenericStruct</Link> </div>

<div><Link to="struct.PlainStruct" className="rust-struct">PlainStruct</Link> </div>

<div><Link to="struct.TupleStruct" className="rust-struct">TupleStruct</Link> </div>

<div><Link to="struct.UnitStruct" className="rust-struct">UnitStruct</Link> </div>

## Enums

<div><Link to="enum.ComplexEnum" className="rust-struct">ComplexEnum</Link> </div>

<div><Link to="enum.GenericEnum" className="rust-struct">GenericEnum</Link> </div>

<div><Link to="enum.SimpleEnum" className="rust-struct">SimpleEnum</Link> </div>

## Functions

<div><Link to="fn.const_function" className="rust-fn">const_function</Link> </div>

<div><Link to="fn.function_with_args" className="rust-fn">function_with_args</Link> </div>

<div><Link to="fn.function_with_result" className="rust-fn">function_with_result</Link> </div>

<div><Link to="fn.generic_function" className="rust-fn">generic_function</Link> </div>

<div><Link to="fn.multiple_bounds" className="rust-fn">multiple_bounds</Link> </div>

<div><Link to="fn.simple_function" className="rust-fn">simple_function</Link> </div>

<div><Link to="fn.unsafe_function" className="rust-fn">unsafe_function</Link>  — An unsafe function that dereferences a raw pointer.</div>

## Traits

<div><Link to="trait.DisplayDebug" className="rust-trait">DisplayDebug</Link> </div>

<div><Link to="trait.MyTrait" className="rust-trait">MyTrait</Link> </div>

## Constants

<div><Link to="constant.MAX_SIZE" className="rust-constant">MAX_SIZE</Link> </div>

<div><Link to="constant.MIN_SIZE" className="rust-constant">MIN_SIZE</Link> </div>

<div><Link to="constant.VERSION" className="rust-constant">VERSION</Link> </div>

## Type Aliases

<div><Link to="type.GenericResult" className="rust-type">GenericResult</Link> </div>

<div><Link to="type.Result" className="rust-type">Result</Link> </div>
