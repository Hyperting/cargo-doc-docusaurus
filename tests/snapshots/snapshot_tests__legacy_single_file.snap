---
source: tests/snapshot_tests.rs
expression: markdown
---
# test_crate

# Test Crate

A comprehensive test crate demonstrating all Rust documentation features.

This crate serves as a test fixture for `cargo-doc-md` and demonstrates:

- **Structs**: Plain, tuple, unit, generic, with methods
- **Enums**: Simple and complex variants
- **Traits**: With associated types, constants, default implementations
- **Functions**: Including async, generic, const, and unsafe
- **Lifetimes**: Explicit lifetime parameters and bounds
- **Patterns**: Builder, newtype, typestate, visitor
- **Error handling**: Custom error types with `std::error::Error`
- **Documentation**: Rich markdown with examples, links, and code blocks

## Quick Start

```rust
use test_crate::{PlainStruct, Builder};

let item = PlainStruct::new("example".to_string(), 42);
assert_eq!(item.get_value(), 42);

let built = Builder::new()
    .name("test".to_string())
    .value(100)
    .build()
    .unwrap();
```

## Module Organization

- [`types`] - Type definitions including containers and enums
- [`functions`] - Various function signatures and examples
- [`traits`] - Advanced trait definitions with associated types
- [`lifetimes`] - Lifetime parameter examples
- [`patterns`] - Common Rust design patterns
- [`async_example`] - Async/await functionality
- [`errors`] - Error handling patterns
- [`nested`] - Nested module hierarchy example

## Feature Flags

This crate has no feature flags but demonstrates documentation of them.

## Safety

This crate contains `unsafe` code examples for documentation purposes only.

## Table of Contents

- **test_crate**
  - [BoundedGeneric](#test_crate-boundedgeneric)
  - [ComplexEnum](#test_crate-complexenum)
  - [DisplayDebug](#test_crate-displaydebug)
  - [Error](#test_crate-error)
  - [GenericEnum](#test_crate-genericenum)
  - [GenericResult](#test_crate-genericresult)
  - [GenericStruct](#test_crate-genericstruct)
  - [MAX_SIZE](#test_crate-max_size)
  - [MIN_SIZE](#test_crate-min_size)
  - [MyTrait](#test_crate-mytrait)
  - [PlainStruct](#test_crate-plainstruct)
  - [Result](#test_crate-result)
  - [SimpleEnum](#test_crate-simpleenum)
  - [TupleStruct](#test_crate-tuplestruct)
  - [UnitStruct](#test_crate-unitstruct)
  - [VERSION](#test_crate-version)
  - [async_example](#test_crate-async_example)
  - [const_function](#test_crate-const_function)
  - [errors](#test_crate-errors)
  - [function_with_args](#test_crate-function_with_args)
  - [function_with_result](#test_crate-function_with_result)
  - [functions](#test_crate-functions)
  - [generic_function](#test_crate-generic_function)
  - [lifetimes](#test_crate-lifetimes)
  - [multiple_bounds](#test_crate-multiple_bounds)
  - [nested](#test_crate-nested)
  - [patterns](#test_crate-patterns)
  - [simple_function](#test_crate-simple_function)
  - [traits](#test_crate-traits)
  - [types](#test_crate-types)
  - [unsafe_function](#test_crate-unsafe_function)
- **async_example**
  - [AsyncCounter](#test_crate-async_example-asynccounter)
  - [AsyncIterator](#test_crate-async_example-asynciterator)
  - [AsyncStruct](#test_crate-async_example-asyncstruct)
  - [AsyncTrait](#test_crate-async_example-asynctrait)
  - [async_with_args](#test_crate-async_example-async_with_args)
  - [boxed_future](#test_crate-async_example-boxed_future)
  - [generic_async](#test_crate-async_example-generic_async)
  - [returns_future](#test_crate-async_example-returns_future)
  - [simple_async](#test_crate-async_example-simple_async)
- **errors**
  - [CustomError](#test_crate-errors-customerror)
  - [ErrorContext](#test_crate-errors-errorcontext)
  - [IntoContext](#test_crate-errors-intocontext)
  - [Result](#test_crate-errors-result)
  - [chain_errors](#test_crate-errors-chain_errors)
  - [fallible_operation](#test_crate-errors-fallible_operation)
  - [operation_with_context](#test_crate-errors-operation_with_context)
- **functions**
  - [add](#test_crate-functions-add)
  - [async_function](#test_crate-functions-async_function)
  - [complex_generics](#test_crate-functions-complex_generics)
  - [const_function](#test_crate-functions-const_function)
  - [filter](#test_crate-functions-filter)
  - [for_each](#test_crate-functions-for_each)
  - [function_with_very_long_signature](#test_crate-functions-function_with_very_long_signature)
  - [higher_order_function](#test_crate-functions-higher_order_function)
  - [map](#test_crate-functions-map)
  - [multiply](#test_crate-functions-multiply)
  - [process_mut_slice](#test_crate-functions-process_mut_slice)
  - [process_slice](#test_crate-functions-process_slice)
  - [unsafe_function](#test_crate-functions-unsafe_function)
- **lifetimes**
  - [BorrowedData](#test_crate-lifetimes-borroweddata)
  - [DoubleBorrow](#test_crate-lifetimes-doubleborrow)
  - [LifetimeEnum](#test_crate-lifetimes-lifetimeenum)
  - [LifetimeStruct](#test_crate-lifetimes-lifetimestruct)
  - [LifetimeTrait](#test_crate-lifetimes-lifetimetrait)
  - [LifetimeWithBound](#test_crate-lifetimes-lifetimewithbound)
  - [higher_ranked_trait_bound](#test_crate-lifetimes-higher_ranked_trait_bound)
  - [lifetime_function](#test_crate-lifetimes-lifetime_function)
  - [multiple_lifetimes](#test_crate-lifetimes-multiple_lifetimes)
- **nested**
  - [OuterStruct](#test_crate-nested-outerstruct)
  - [inner](#test_crate-nested-inner)
  - [reexport_test](#test_crate-nested-reexport_test)
- **nested::inner**
  - [InnerStruct](#test_crate-nested-inner-innerstruct)
  - [deep](#test_crate-nested-inner-deep)
  - [inner_function](#test_crate-nested-inner-inner_function)
- **nested::inner::deep**
  - [DeepStruct](#test_crate-nested-inner-deep-deepstruct)
  - [deep_function](#test_crate-nested-inner-deep-deep_function)
  - [deeper](#test_crate-nested-inner-deep-deeper)
- **nested::inner::deep::deeper**
  - [DeeperStruct](#test_crate-nested-inner-deep-deeper-deeperstruct)
- **nested::reexport_test**
  - [GlobEnum](#test_crate-nested-reexport_test-globenum)
  - [GlobStruct](#test_crate-nested-reexport_test-globstruct)
  - [glob_function](#test_crate-nested-reexport_test-glob_function)
  - [items](#test_crate-nested-reexport_test-items)
- **nested::reexport_test::items**
  - [GlobEnum](#test_crate-nested-reexport_test-items-globenum)
  - [GlobStruct](#test_crate-nested-reexport_test-items-globstruct)
  - [glob_function](#test_crate-nested-reexport_test-items-glob_function)
- **patterns**
  - [Builder](#test_crate-patterns-builder)
  - [Built](#test_crate-patterns-built)
  - [Closed](#test_crate-patterns-closed)
  - [Handle](#test_crate-patterns-handle)
  - [Newtype](#test_crate-patterns-newtype)
  - [Open](#test_crate-patterns-open)
  - [TypeState](#test_crate-patterns-typestate)
  - [Visitor](#test_crate-patterns-visitor)
- **traits**
  - [Associated](#test_crate-traits-associated)
  - [AssociatedImpl](#test_crate-traits-associatedimpl)
  - [ComplexBounds](#test_crate-traits-complexbounds)
  - [Converter](#test_crate-traits-converter)
  - [DefaultImpl](#test_crate-traits-defaultimpl)
  - [Display](#test_crate-traits-display)
  - [ExtensionTrait](#test_crate-traits-extensiontrait)
  - [FromIterator](#test_crate-traits-fromiterator)
  - [GenericTrait](#test_crate-traits-generictrait)
  - [Iterator](#test_crate-traits-iterator)
  - [Sealed](#test_crate-traits-sealed)
  - [SealedType](#test_crate-traits-sealedtype)
  - [SuperTrait](#test_crate-traits-supertrait)
- **traits::private**
  - [SealedTrait](#test_crate-traits-private-sealedtrait)
- **types**
  - [Container](#test_crate-types-container)
  - [DEFAULT_CAPACITY](#test_crate-types-default_capacity)
  - [MAX_RETRIES](#test_crate-types-max_retries)
  - [Map](#test_crate-types-map)
  - [Pair](#test_crate-types-pair)
  - [RefStruct](#test_crate-types-refstruct)
  - [Status](#test_crate-types-status)
  - [StringMap](#test_crate-types-stringmap)


---

# Module: `test_crate`

<RustCode code={`pub struct BoundedGeneric<T> {
    pub data: T,
}`} links={[]} />

### Generic Parameters

- T

### Fields

<RustCode inline code={`data: T`} links={[]} />


### Methods

<RustCode inline code={`fn new(data: T) -> Self`} links={[]} />

---

<RustCode inline code={`fn clone_data(self: &Self) -> T`} links={[]} />

---



<RustCode code={`pub enum ComplexEnum {
    Unit,
    Tuple(String, i32),
    Struct { name: String, age: u32 },
}`} links={[{"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}, {"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}]} />

### Variants

- `Unit`
- `Tuple(String, i32)`
- `Struct{ name: String, age: u32 }`

### Methods

<RustCode inline code={`fn name(self: &Self) -> Option<&str>`} links={[{"text": "Option", "href": "https://doc.rust-lang.org/std/option/enum.Option.html"}]} />

---



```rust
pub trait DisplayDebug { /* ... */ }
```

### Methods

- `format_both`



<RustCode code={`pub struct Error;`} links={[]} />

### Methods

<RustCode inline code={`fn new<impl Into<String>>(message: impl Trait) -> Self`} links={[{"text": "Into", "href": "https://doc.rust-lang.org/core/convert/struct.Into.html"}, {"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}]} />

---

<RustCode inline code={`fn message(self: &Self) -> &str`} links={[]} />

---

**Traits:** Error

### Trait Implementations

#### Debug

<RustCode inline code={`fn fmt(self: &Self, f: & mut Formatter) -> Result`} links={[{"text": "Formatter", "href": "https://doc.rust-lang.org/core/fmt/struct.Formatter.html"}, {"text": "Result", "href": "https://doc.rust-lang.org/std/result/enum.Result.html"}]} />

---

#### Display

<RustCode inline code={`fn fmt(self: &Self, f: & mut Formatter) -> Result`} links={[{"text": "Formatter", "href": "https://doc.rust-lang.org/core/fmt/struct.Formatter.html"}, {"text": "Result", "href": "https://doc.rust-lang.org/std/result/enum.Result.html"}]} />

---



<RustCode code={`pub enum GenericEnum<T, E> {
    Ok(T),
    Err(E),
    None,
}`} links={[]} />

### Generic Parameters

- T
- E

### Variants

- `Ok(T)`
- `Err(E)`
- `None`

### Methods

<RustCode inline code={`fn is_ok(self: &Self) -> bool`} links={[]} />

---

<RustCode inline code={`fn is_err(self: &Self) -> bool`} links={[]} />

---

<RustCode inline code={`fn ok(self: Self) -> Option<T>`} links={[{"text": "Option", "href": "https://doc.rust-lang.org/std/option/enum.Option.html"}]} />

---

### Trait Implementations

#### Clone

<RustCode inline code={`fn clone(self: &Self) -> GenericEnum<T, E>`} links={[{"text": "GenericEnum", "href": "/test_crate/enum.GenericEnum"}]} />

---

#### Debug

<RustCode inline code={`fn fmt(self: &Self, f: & mut Formatter) -> Result`} links={[{"text": "Formatter", "href": "https://doc.rust-lang.org/core/fmt/struct.Formatter.html"}, {"text": "Result", "href": "https://doc.rust-lang.org/std/result/enum.Result.html"}]} />

---



## test_crate::GenericResult

*Type Alias*: `[Result](https://doc.rust-lang.org/std/result/enum.Result.html)<T, E>`



<RustCode code={`pub struct GenericStruct<T, U> {
    pub first: T,
    pub second: U,
}`} links={[]} />

### Generic Parameters

- T
- U

### Fields

<RustCode inline code={`first: T`} links={[]} />

<RustCode inline code={`second: U`} links={[]} />


### Methods

<RustCode inline code={`fn duplicate(self: &Self) -> (T, U)`} links={[]} />

---

<RustCode inline code={`fn new(first: T, second: U) -> Self`} links={[]} />

---

<RustCode inline code={`fn swap(self: Self) -> GenericStruct<U, T>`} links={[{"text": "GenericStruct", "href": "/test_crate/struct.GenericStruct"}]} />

---

<RustCode inline code={`fn map_first<F, R>(self: Self, f: F) -> GenericStruct<R, U>`} links={[{"text": "GenericStruct", "href": "/test_crate/struct.GenericStruct"}]} />

---

### Trait Implementations

#### Clone

<RustCode inline code={`fn clone(self: &Self) -> GenericStruct<T, U>`} links={[{"text": "GenericStruct", "href": "/test_crate/struct.GenericStruct"}]} />

---

#### Debug

<RustCode inline code={`fn fmt(self: &Self, f: & mut Formatter) -> Result`} links={[{"text": "Formatter", "href": "https://doc.rust-lang.org/core/fmt/struct.Formatter.html"}, {"text": "Result", "href": "https://doc.rust-lang.org/std/result/enum.Result.html"}]} />

---



## test_crate::MAX_SIZE

*Constant*



## test_crate::MIN_SIZE

*Constant*



```rust
pub trait MyTrait { /* ... */ }
```

### Methods

- `required_method`
- `provided_method`
- `another_provided`



<RustCode code={`pub struct PlainStruct {
    pub name: String,
    pub value: i32,
}`} links={[{"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}]} />

### Fields

<RustCode inline code={`name: String`} links={[{"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}]} />

<RustCode inline code={`value: i32`} links={[]} />


### Methods

<RustCode inline code={`fn new(name: String, value: i32) -> Self`} links={[{"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}]} />

---

<RustCode inline code={`fn with_private(name: String, value: i32, private_field: bool) -> Self`} links={[{"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}]} />

---

<RustCode inline code={`fn get_value(self: &Self) -> i32`} links={[]} />

---

<RustCode inline code={`fn set_value(self: & mut Self, value: i32)`} links={[]} />

---

**Traits:** Eq

### Trait Implementations

#### Clone

<RustCode inline code={`fn clone(self: &Self) -> PlainStruct`} links={[{"text": "PlainStruct", "href": "/test_crate/struct.PlainStruct"}]} />

---

#### Debug

<RustCode inline code={`fn fmt(self: &Self, f: & mut Formatter) -> Result`} links={[{"text": "Formatter", "href": "https://doc.rust-lang.org/core/fmt/struct.Formatter.html"}, {"text": "Result", "href": "https://doc.rust-lang.org/std/result/enum.Result.html"}]} />

---

#### Default

<RustCode inline code={`fn default() -> Self`} links={[]} />

---

#### MyTrait

<RustCode inline code={`fn required_method(self: &Self) -> String`} links={[{"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}]} />

---

<RustCode inline code={`fn provided_method(self: &Self) -> i32`} links={[]} />

---

#### PartialEq

<RustCode inline code={`fn eq(self: &Self, other: &PlainStruct) -> bool`} links={[{"text": "PlainStruct", "href": "/test_crate/struct.PlainStruct"}]} />

---



## test_crate::Result

*Type Alias*: `[Result](https://doc.rust-lang.org/std/result/enum.Result.html)<T, [Error](/test_crate/struct.Error)>`



<RustCode code={`pub enum SimpleEnum {
    VariantA,
    VariantB,
    VariantC,
}`} links={[]} />

### Variants

- `VariantA`
- `VariantB`
- `VariantC`

### Methods

<RustCode inline code={`fn default_variant() -> Self`} links={[]} />

---

<RustCode inline code={`fn is_variant_a(self: &Self) -> bool`} links={[]} />

---

**Traits:** Eq

### Trait Implementations

#### Clone

<RustCode inline code={`fn clone(self: &Self) -> SimpleEnum`} links={[{"text": "SimpleEnum", "href": "/test_crate/enum.SimpleEnum"}]} />

---

#### Debug

<RustCode inline code={`fn fmt(self: &Self, f: & mut Formatter) -> Result`} links={[{"text": "Formatter", "href": "https://doc.rust-lang.org/core/fmt/struct.Formatter.html"}, {"text": "Result", "href": "https://doc.rust-lang.org/std/result/enum.Result.html"}]} />

---

#### PartialEq

<RustCode inline code={`fn eq(self: &Self, other: &SimpleEnum) -> bool`} links={[{"text": "SimpleEnum", "href": "/test_crate/enum.SimpleEnum"}]} />

---



<RustCode code={`pub struct TupleStruct(pub String, pub i32);`} links={[{"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}]} />

**Tuple Struct**: `([String](https://doc.rust-lang.org/alloc/string/struct.String.html), i32)`



<RustCode code={`pub struct UnitStruct;`} links={[]} />

**Unit Struct**



## test_crate::VERSION

*Constant*



## Module: async_example



*Function*

<RustCode code={`fn const_function(x: i32) -> i32`} links={[]} />



## Module: errors



*Function*

<RustCode code={`fn function_with_args(name: &str, value: i32) -> String`} links={[{"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}]} />



*Function*

<RustCode code={`fn function_with_result(value: i32) -> Result<String>`} links={[{"text": "Result", "href": "/test_crate/type.Result"}, {"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}]} />



## Module: functions

Function examples demonstrating various signatures and patterns.

This module shows:
- Simple functions
- Generic functions with trait bounds
- Async functions
- Unsafe functions
- Const functions
- Higher-order functions



*Function*

<RustCode code={`fn generic_function<T>(item: T) -> String`} links={[{"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}]} />



## Module: lifetimes



*Function*

<RustCode code={`fn multiple_bounds<T>(item: T) -> String`} links={[{"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}]} />



## Module: nested

Demonstrates nested module hierarchies.

This shows how documentation is structured for deeply nested modules.



## Module: patterns



*Function*

<RustCode code={`fn simple_function()`} links={[]} />



## Module: traits



## Module: types

Type definitions and containers.

This module demonstrates various type definitions including:
- Generic containers
- Enums with multiple variants
- Type aliases
- Structs with lifetime parameters



*Function*

An unsafe function that dereferences a raw pointer.

# Safety

The caller must ensure that `ptr` is valid, properly aligned,
and points to initialized memory.

<RustCode code={`fn unsafe_function(ptr: *const u8) -> u8`} links={[]} />



---

# Module: `test_crate::async_example`

<RustCode code={`pub struct AsyncCounter;`} links={[]} />

### Methods

<RustCode inline code={`fn new(max: usize) -> Self`} links={[]} />

---

### Trait Implementations

#### AsyncIterator

<RustCode inline code={`fn next(self: & mut Self) -> Option<<Self as >::Item>`} links={[{"text": "Option", "href": "https://doc.rust-lang.org/std/option/enum.Option.html"}, {"text": "", "href": "/test_crate/async_example/trait.AsyncIterator"}]} />

---



```rust
pub trait AsyncIterator { /* ... */ }
```

### Methods

- `Item`
- `next`



<RustCode code={`pub struct AsyncStruct {
    pub data: String,
}`} links={[{"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}]} />

### Fields

<RustCode inline code={`data: String`} links={[{"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}]} />


### Methods

<RustCode inline code={`fn async_new(data: String) -> Self`} links={[{"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}]} />

---

<RustCode inline code={`fn process(self: &Self) -> Result<String, String>`} links={[{"text": "Result", "href": "https://doc.rust-lang.org/std/result/enum.Result.html"}, {"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}, {"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}]} />

---

<RustCode inline code={`fn fetch(self: &Self, url: &str) -> Result<Vec<u8>, String>`} links={[{"text": "Result", "href": "https://doc.rust-lang.org/std/result/enum.Result.html"}, {"text": "Vec", "href": "https://doc.rust-lang.org/alloc/vec/struct.Vec.html"}, {"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}]} />

---



```rust
pub trait AsyncTrait { /* ... */ }
```

### Methods

- `async_method`
- `async_with_default`



*Function*

<RustCode code={`fn async_with_args(name: &str, count: usize) -> Vec<String>`} links={[{"text": "Vec", "href": "https://doc.rust-lang.org/alloc/vec/struct.Vec.html"}, {"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}]} />



*Function*

<RustCode code={`fn boxed_future() -> Pin<Box<dyn Future>>`} links={[{"text": "Pin", "href": "https://doc.rust-lang.org/core/pin/struct.Pin.html"}, {"text": "Box", "href": "https://doc.rust-lang.org/alloc/boxed/struct.Box.html"}, {"text": "Future", "href": "https://doc.rust-lang.org/core/future/future/struct.Future.html"}]} />



*Function*

<RustCode code={`fn generic_async<T>(item: T) -> T`} links={[]} />



*Function*

<RustCode code={`fn returns_future() -> impl Trait`} links={[{"text": "Future", "href": "https://doc.rust-lang.org/core/future/future/struct.Future.html"}]} />



*Function*

<RustCode code={`fn simple_async() -> String`} links={[{"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}]} />



---

# Module: `test_crate::errors`

<RustCode code={`pub enum CustomError {
    NotFound,
    InvalidInput { field: String, reason: String },
    Io(Error),
    Parse(String),
    Multiple(Vec<CustomError>),
}`} links={[{"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}, {"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}, {"text": "Error", "href": "https://doc.rust-lang.org/std/io/error/enum.Error.html"}, {"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}, {"text": "Vec", "href": "https://doc.rust-lang.org/alloc/vec/struct.Vec.html"}, {"text": "CustomError", "href": "/test_crate/errors/enum.CustomError"}]} />

### Variants

- `NotFound`
- `InvalidInput{ field: String, reason: String }`
- `Io(Error)`
- `Parse(String)`
- `Multiple(Vec<CustomError>)`

### Trait Implementations

#### Debug

<RustCode inline code={`fn fmt(self: &Self, f: & mut Formatter) -> Result`} links={[{"text": "Formatter", "href": "https://doc.rust-lang.org/core/fmt/struct.Formatter.html"}, {"text": "Result", "href": "https://doc.rust-lang.org/std/result/enum.Result.html"}]} />

---

#### Display

<RustCode inline code={`fn fmt(self: &Self, f: & mut Formatter) -> Result`} links={[{"text": "Formatter", "href": "https://doc.rust-lang.org/core/fmt/struct.Formatter.html"}, {"text": "Result", "href": "https://doc.rust-lang.org/std/result/enum.Result.html"}]} />

---

#### Error

<RustCode inline code={`fn source(self: &Self) -> Option<&dyn StdError>`} links={[{"text": "Option", "href": "https://doc.rust-lang.org/std/option/enum.Option.html"}, {"text": "StdError", "href": "https://doc.rust-lang.org/core/error/enum.Error.html"}]} />

---

#### From

<RustCode inline code={`fn from(error: Error) -> Self`} links={[{"text": "Error", "href": "https://doc.rust-lang.org/std/io/error/enum.Error.html"}]} />

---

#### From

<RustCode inline code={`fn from(error: String) -> Self`} links={[{"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}]} />

---



<RustCode code={`pub struct ErrorContext {
    pub error: CustomError,
    pub context: String,
}`} links={[{"text": "CustomError", "href": "/test_crate/errors/enum.CustomError"}, {"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}]} />

### Fields

<RustCode inline code={`error: CustomError`} links={[{"text": "CustomError", "href": "/test_crate/errors/enum.CustomError"}]} />

<RustCode inline code={`context: String`} links={[{"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}]} />


### Trait Implementations

#### Debug

<RustCode inline code={`fn fmt(self: &Self, f: & mut Formatter) -> Result`} links={[{"text": "Formatter", "href": "https://doc.rust-lang.org/core/fmt/struct.Formatter.html"}, {"text": "Result", "href": "https://doc.rust-lang.org/std/result/enum.Result.html"}]} />

---

#### Display

<RustCode inline code={`fn fmt(self: &Self, f: & mut Formatter) -> Result`} links={[{"text": "Formatter", "href": "https://doc.rust-lang.org/core/fmt/struct.Formatter.html"}, {"text": "Result", "href": "https://doc.rust-lang.org/std/result/enum.Result.html"}]} />

---

#### Error

<RustCode inline code={`fn source(self: &Self) -> Option<&dyn StdError>`} links={[{"text": "Option", "href": "https://doc.rust-lang.org/std/option/enum.Option.html"}, {"text": "StdError", "href": "https://doc.rust-lang.org/core/error/enum.Error.html"}]} />

---



```rust
pub trait IntoContext { /* ... */ }
```

### Methods

- `context`



## test_crate::errors::Result

*Type Alias*: `[Result](https://doc.rust-lang.org/std/result/enum.Result.html)<T, [CustomError](/test_crate/errors/enum.CustomError)>`



*Function*

<RustCode code={`fn chain_errors() -> Result<String>`} links={[{"text": "Result", "href": "/test_crate/errors/type.Result"}, {"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}]} />



*Function*

<RustCode code={`fn fallible_operation() -> Result<String>`} links={[{"text": "Result", "href": "/test_crate/errors/type.Result"}, {"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}]} />



*Function*

<RustCode code={`fn operation_with_context(value: i32) -> Result<String>`} links={[{"text": "Result", "href": "/test_crate/errors/type.Result"}, {"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}]} />



---

# Module: `test_crate::functions`

*Function*

Adds two numbers together.

# Examples

```
use test_crate::functions::add;

assert_eq!(add(2, 3), 5);
```

<RustCode code={`fn add(a: i32, b: i32) -> i32`} links={[]} />



*Function*

An async function that simulates fetching data.

# Arguments

* `url` - The URL to fetch from

# Returns

A `Result` containing the fetched string or an error message.

# Examples

```no_run
# async fn example() {
use test_crate::functions::async_function;

let result = async_function("https://example.com").await;
assert!(result.is_ok());
# }
```

<RustCode code={`fn async_function(url: &str) -> Result<String, String>`} links={[{"text": "Result", "href": "https://doc.rust-lang.org/std/result/enum.Result.html"}, {"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}, {"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}]} />



*Function*

A function that takes multiple generic parameters with different bounds.

<RustCode code={`fn complex_generics<T, U, V>(t: T, u: U, _v: V) -> String`} links={[{"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}]} />



*Function*

A const function that can be evaluated at compile time.

# Examples

```
use test_crate::functions::const_function;

const VALUE: i32 = const_function(21);
assert_eq!(VALUE, 42);
```

<RustCode code={`fn const_function(x: i32) -> i32`} links={[]} />



*Function*

Filters a slice based on a predicate.

<RustCode code={`fn filter<T, F>(slice: &[T], predicate: F) -> Vec<&T>`} links={[{"text": "Vec", "href": "https://doc.rust-lang.org/alloc/vec/struct.Vec.html"}]} />



*Function*

Applies a closure to each element in a slice.

# Type Parameters

* `T` - The type of elements in the slice
* `F` - The closure type

<RustCode code={`fn for_each<T, F>(slice: &[T], f: F)`} links={[]} />



*Function*

A function with a very long signature that should be formatted on multiple lines.
 
This function demonstrates how multi-line signatures are rendered in the documentation.
It takes many parameters with complex types to trigger the multi-line formatting.
 
# Arguments
 
* `user_id` - The unique identifier for the user
* `session_data` - A map containing session information
* `config_options` - A vector of configuration key-value pairs
* `timeout_seconds` - The timeout duration in seconds
 
# Returns
 
A Result containing a HashMap with processed data or an error message

<RustCode code={`fn function_with_very_long_signature(
    user_id: u64,
    session_data: HashMap<String, String>,
    config_options: Vec<(String, String)>,
    timeout_seconds: u64
) -> Result<HashMap<String, Vec<u8>>, String>`} links={[{"text": "HashMap", "href": "https://doc.rust-lang.org/std/collections/hash/map/struct.HashMap.html"}, {"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}, {"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}, {"text": "Vec", "href": "https://doc.rust-lang.org/alloc/vec/struct.Vec.html"}, {"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}, {"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}, {"text": "Result", "href": "https://doc.rust-lang.org/std/result/enum.Result.html"}, {"text": "HashMap", "href": "https://doc.rust-lang.org/std/collections/hash/map/struct.HashMap.html"}, {"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}, {"text": "Vec", "href": "https://doc.rust-lang.org/alloc/vec/struct.Vec.html"}, {"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}]} />



*Function*

A higher-order function that applies a function to a value.

# Arguments

* `f` - A function that takes an `i32` and returns an `i32`

# Returns

The result of calling `f(42)`.

<RustCode code={`fn higher_order_function<F>(f: F) -> i32`} links={[]} />



*Function*

Maps a slice to a new vector using a closure.

<RustCode code={`fn map<T, U, F>(slice: &[T], f: F) -> Vec<U>`} links={[{"text": "Vec", "href": "https://doc.rust-lang.org/alloc/vec/struct.Vec.html"}]} />



*Function*

Multiplies two values that implement `Mul`.

This is a generic function that works with any type implementing
the multiplication operator.

# Type Parameters

* `T` - A type that implements `Mul` and `Copy`

<RustCode code={`fn multiply<T>(a: T, b: T) -> T`} links={[]} />



*Function*

Mutates a byte slice in place.

Each byte is incremented by 1 (with wrapping).

# Arguments

* `data` - A mutable reference to the byte slice

<RustCode code={`fn process_mut_slice(data: & mut [u8])`} links={[]} />



*Function*

Processes a byte slice and returns a new vector.

# Arguments

* `data` - The input byte slice to process

# Returns

A new `Vec<u8>` containing a copy of the input data.

<RustCode code={`fn process_slice(data: &[u8]) -> Vec<u8>`} links={[{"text": "Vec", "href": "https://doc.rust-lang.org/alloc/vec/struct.Vec.html"}]} />



*Function*

An unsafe function that dereferences a raw pointer.

# Safety

The caller must ensure that `ptr` is valid and properly aligned.

# Arguments

* `ptr` - A raw pointer to a `u8`

<RustCode code={`fn unsafe_function(ptr: *const u8) -> u8`} links={[]} />



---

# Module: `test_crate::lifetimes`

<RustCode code={`pub struct BorrowedData<'a> {
    pub data: &'a str,
    pub metadata: &'a [u8],
}`} links={[]} />

### Generic Parameters

- 'a

### Fields

<RustCode inline code={`data: &'a str`} links={[]} />

<RustCode inline code={`metadata: &'a [u8]`} links={[]} />


### Methods

<RustCode inline code={`fn new(data: &'a str, metadata: &'a [u8]) -> Self`} links={[]} />

---

<RustCode inline code={`fn get_data(self: &Self) -> &'a str`} links={[]} />

---



<RustCode code={`pub struct DoubleBorrow<'a, 'b> {
    pub first: &'a str,
    pub second: &'b str,
}`} links={[]} />

### Generic Parameters

- 'a
- 'b

### Fields

<RustCode inline code={`first: &'a str`} links={[]} />

<RustCode inline code={`second: &'b str`} links={[]} />




<RustCode code={`pub enum LifetimeEnum<'a> {
    Borrowed(&'a str),
    Owned(String),
    Multiple { first: &'a str, second: &'a [u8] },
}`} links={[{"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}]} />

### Generic Parameters

- 'a

### Variants

- `Borrowed(&'a str)`
- `Owned(String)`
- `Multiple{ first: &'a str, second: &'a [u8] }`



<RustCode code={`pub struct LifetimeStruct<'a, T> {
    pub data: &'a T,
    pub name: String,
}`} links={[{"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}]} />

### Generic Parameters

- 'a
- T

### Fields

<RustCode inline code={`data: &'a T`} links={[]} />

<RustCode inline code={`name: String`} links={[{"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}]} />


### Methods

<RustCode inline code={`fn new(data: &'a T, name: String) -> Self`} links={[{"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}]} />

---

<RustCode inline code={`fn clone_data(self: &Self) -> T`} links={[]} />

---



```rust
pub trait LifetimeTrait { /* ... */ }
```

### Methods

- `Output`
- `process`



<RustCode code={`pub struct LifetimeWithBound<'a, T> {
    pub reference: &'a T,
}`} links={[]} />

### Generic Parameters

- 'a
- T

### Fields

<RustCode inline code={`reference: &'a T`} links={[]} />


### Methods

<RustCode inline code={`fn display(self: &Self) -> String`} links={[{"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}]} />

---



*Function*

<RustCode code={`fn higher_ranked_trait_bound<F>(f: F) -> String`} links={[{"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}]} />



*Function*

<RustCode code={`fn lifetime_function<'a>(x: &'a str, y: &'a str) -> &'a str`} links={[]} />



*Function*

<RustCode code={`fn multiple_lifetimes<'a, 'b>(x: &'a str, _y: &'b str) -> &'a str`} links={[]} />



---

# Module: `test_crate::nested`

<RustCode code={`pub struct OuterStruct {
    pub inner: InnerStruct,
}`} links={[{"text": "InnerStruct", "href": "/test_crate/nested/inner/struct.InnerStruct"}]} />

An outer struct that contains an inner struct.

### Fields

<RustCode inline code={`inner: InnerStruct`} links={[{"text": "InnerStruct", "href": "/test_crate/nested/inner/struct.InnerStruct"}]} />


### Methods

<RustCode inline code={`fn new(value: i32) -> Self`} links={[]} />

Creates a new `OuterStruct`.

---

<RustCode inline code={`fn get_value(self: &Self) -> i32`} links={[]} />

Gets the inner value.

---



## Module: inner

Inner module with its own types and functions.



## Module: reexport_test

Module that demonstrates glob re-exports (pub use module::*).
This should generate duplicate documentation like rustdoc does.



---

# Module: `test_crate::nested::inner`

<RustCode code={`pub struct InnerStruct {
    pub value: i32,
}`} links={[]} />

A struct defined in the inner module.

### Fields

<RustCode inline code={`value: i32`} links={[]} />


### Methods

<RustCode inline code={`fn new(value: i32) -> Self`} links={[]} />

Creates a new `InnerStruct`.

---

<RustCode inline code={`fn double(self: & mut Self)`} links={[]} />

Doubles the value.

---



## Module: deep

Deeply nested module.



*Function*

A function in the inner module.

<RustCode code={`fn inner_function() -> &'static str`} links={[]} />



---

# Module: `test_crate::nested::inner::deep`

<RustCode code={`pub struct DeepStruct {
    pub data: String,
}`} links={[{"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}]} />

A struct in the deeply nested module.

### Fields

<RustCode inline code={`data: String`} links={[{"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}]} />


### Methods

<RustCode inline code={`fn new(data: String) -> Self`} links={[{"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}]} />

Creates a new `DeepStruct`.

---

<RustCode inline code={`fn len(self: &Self) -> usize`} links={[]} />

Returns the length of the data.

---

<RustCode inline code={`fn is_empty(self: &Self) -> bool`} links={[]} />

Returns `true` if the data is empty.

---



*Function*

A function in the deeply nested module.

<RustCode code={`fn deep_function() -> i32`} links={[]} />



## Module: deeper

Even deeper nesting.



---

# Module: `test_crate::nested::inner::deep::deeper`

<RustCode code={`pub struct DeeperStruct;`} links={[]} />

The deepest struct.

**Unit Struct**

### Methods

<RustCode inline code={`fn greet() -> &'static str`} links={[]} />

Returns a greeting from the depths.

---



---

# Module: `test_crate::nested::reexport_test`

<RustCode code={`pub enum GlobEnum {
    Variant1,
    Variant2(i32),
}`} links={[]} />

An enum that will be re-exported via glob.

### Variants

- `Variant1` - First variant.
- `Variant2(i32)` - Second variant with data.



<RustCode code={`pub struct GlobStruct {
    pub field: String,
}`} links={[{"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}]} />

A struct that will be re-exported via glob.

### Fields

<RustCode inline code={`field: String`} links={[{"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}]} />


### Methods

<RustCode inline code={`fn new(field: String) -> Self`} links={[{"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}]} />

Creates a new GlobStruct.

---



*Function*

A function that will be re-exported via glob.

<RustCode code={`fn glob_function() -> &'static str`} links={[]} />



## Module: items

Items that will be glob re-exported.



---

# Module: `test_crate::nested::reexport_test::items`

<RustCode code={`pub enum GlobEnum {
    Variant1,
    Variant2(i32),
}`} links={[]} />

An enum that will be re-exported via glob.

### Variants

- `Variant1` - First variant.
- `Variant2(i32)` - Second variant with data.



<RustCode code={`pub struct GlobStruct {
    pub field: String,
}`} links={[{"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}]} />

A struct that will be re-exported via glob.

### Fields

<RustCode inline code={`field: String`} links={[{"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}]} />


### Methods

<RustCode inline code={`fn new(field: String) -> Self`} links={[{"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}]} />

Creates a new GlobStruct.

---



*Function*

A function that will be re-exported via glob.

<RustCode code={`fn glob_function() -> &'static str`} links={[]} />



---

# Module: `test_crate::patterns`

<RustCode code={`pub struct Builder;`} links={[]} />

### Methods

<RustCode inline code={`fn new() -> Self`} links={[]} />

---

<RustCode inline code={`fn name(self: Self, name: String) -> Self`} links={[{"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}]} />

---

<RustCode inline code={`fn value(self: Self, value: i32) -> Self`} links={[]} />

---

<RustCode inline code={`fn enabled(self: Self, enabled: bool) -> Self`} links={[]} />

---

<RustCode inline code={`fn build(self: Self) -> Result<Built, &'static str>`} links={[{"text": "Result", "href": "https://doc.rust-lang.org/std/result/enum.Result.html"}, {"text": "Built", "href": "/test_crate/patterns/struct.Built"}]} />

---

### Trait Implementations

#### Clone

<RustCode inline code={`fn clone(self: &Self) -> Builder`} links={[{"text": "Builder", "href": "/test_crate/patterns/struct.Builder"}]} />

---

#### Debug

<RustCode inline code={`fn fmt(self: &Self, f: & mut Formatter) -> Result`} links={[{"text": "Formatter", "href": "https://doc.rust-lang.org/core/fmt/struct.Formatter.html"}, {"text": "Result", "href": "https://doc.rust-lang.org/std/result/enum.Result.html"}]} />

---

#### Default

<RustCode inline code={`fn default() -> Self`} links={[]} />

---



<RustCode code={`pub struct Built {
    pub name: String,
    pub value: i32,
    pub enabled: bool,
}`} links={[{"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}]} />

### Fields

<RustCode inline code={`name: String`} links={[{"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}]} />

<RustCode inline code={`value: i32`} links={[]} />

<RustCode inline code={`enabled: bool`} links={[]} />


### Trait Implementations

#### Debug

<RustCode inline code={`fn fmt(self: &Self, f: & mut Formatter) -> Result`} links={[{"text": "Formatter", "href": "https://doc.rust-lang.org/core/fmt/struct.Formatter.html"}, {"text": "Result", "href": "https://doc.rust-lang.org/std/result/enum.Result.html"}]} />

---



<RustCode code={`pub struct Closed;`} links={[]} />

**Unit Struct**



<RustCode code={`pub struct Handle<T>;`} links={[]} />

### Generic Parameters

- T

### Methods

<RustCode inline code={`fn new(value: T) -> Self`} links={[]} />

---

<RustCode inline code={`fn get(self: &Self) -> &T`} links={[]} />

---

<RustCode inline code={`fn get_mut(self: & mut Self) -> & mut T`} links={[]} />

---

<RustCode inline code={`fn into_inner(self: Self) -> T`} links={[]} />

---



<RustCode code={`pub struct Newtype(pub u64);`} links={[]} />

**Tuple Struct**: `(u64)`

### Methods

<RustCode inline code={`fn new(value: u64) -> Self`} links={[]} />

---

<RustCode inline code={`fn inner(self: &Self) -> u64`} links={[]} />

---

**Traits:** Eq, Copy

### Trait Implementations

#### Clone

<RustCode inline code={`fn clone(self: &Self) -> Newtype`} links={[{"text": "Newtype", "href": "/test_crate/patterns/struct.Newtype"}]} />

---

#### Debug

<RustCode inline code={`fn fmt(self: &Self, f: & mut Formatter) -> Result`} links={[{"text": "Formatter", "href": "https://doc.rust-lang.org/core/fmt/struct.Formatter.html"}, {"text": "Result", "href": "https://doc.rust-lang.org/std/result/enum.Result.html"}]} />

---

#### From

<RustCode inline code={`fn from(value: u64) -> Self`} links={[]} />

---

#### Hash

<RustCode inline code={`fn hash<__H>(self: &Self, state: & mut __H)`} links={[]} />

---

#### Ord

<RustCode inline code={`fn cmp(self: &Self, other: &Newtype) -> Ordering`} links={[{"text": "Newtype", "href": "/test_crate/patterns/struct.Newtype"}, {"text": "Ordering", "href": "https://doc.rust-lang.org/core/cmp/struct.Ordering.html"}]} />

---

#### PartialEq

<RustCode inline code={`fn eq(self: &Self, other: &Newtype) -> bool`} links={[{"text": "Newtype", "href": "/test_crate/patterns/struct.Newtype"}]} />

---

#### PartialOrd

<RustCode inline code={`fn partial_cmp(self: &Self, other: &Newtype) -> Option<Ordering>`} links={[{"text": "Newtype", "href": "/test_crate/patterns/struct.Newtype"}, {"text": "Option", "href": "https://doc.rust-lang.org/std/option/enum.Option.html"}, {"text": "Ordering", "href": "https://doc.rust-lang.org/core/cmp/struct.Ordering.html"}]} />

---



<RustCode code={`pub struct Open;`} links={[]} />

**Unit Struct**



<RustCode code={`pub struct TypeState<State>;`} links={[]} />

### Generic Parameters

- State

### Methods

<RustCode inline code={`fn open(self: Self) -> TypeState<Open>`} links={[{"text": "TypeState", "href": "/test_crate/patterns/struct.TypeState"}, {"text": "Open", "href": "/test_crate/patterns/struct.Open"}]} />

---

<RustCode inline code={`fn data(self: &Self) -> &str`} links={[]} />

---

<RustCode inline code={`fn new(data: String) -> Self`} links={[{"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}]} />

---

<RustCode inline code={`fn close(self: Self) -> TypeState<Closed>`} links={[{"text": "TypeState", "href": "/test_crate/patterns/struct.TypeState"}, {"text": "Closed", "href": "/test_crate/patterns/struct.Closed"}]} />

---



<RustCode code={`pub struct Visitor;`} links={[]} />

**Unit Struct**

### Methods

<RustCode inline code={`fn visit_string(self: &Self, _s: &str)`} links={[]} />

---

<RustCode inline code={`fn visit_number(self: &Self, _n: i32)`} links={[]} />

---

<RustCode inline code={`fn visit_bool(self: &Self, _b: bool)`} links={[]} />

---

### Trait Implementations

#### Clone

<RustCode inline code={`fn clone(self: &Self) -> Visitor`} links={[{"text": "Visitor", "href": "/test_crate/patterns/struct.Visitor"}]} />

---

#### Debug

<RustCode inline code={`fn fmt(self: &Self, f: & mut Formatter) -> Result`} links={[{"text": "Formatter", "href": "https://doc.rust-lang.org/core/fmt/struct.Formatter.html"}, {"text": "Result", "href": "https://doc.rust-lang.org/std/result/enum.Result.html"}]} />

---



---

# Module: `test_crate::traits`

```rust
pub trait Associated { /* ... */ }
```

### Methods

- `Assoc`
- `get_assoc`



<RustCode code={`pub struct AssociatedImpl;`} links={[]} />

**Unit Struct**

### Trait Implementations

#### Associated

<RustCode inline code={`fn get_assoc(self: &Self) -> <Self as >::Assoc`} links={[{"text": "", "href": "/test_crate/traits/trait.Associated"}]} />

---



```rust
pub trait ComplexBounds { /* ... */ }
```

### Methods

- `process`



```rust
pub trait Converter { /* ... */ }
```

### Methods

- `Input`
- `Output`
- `Error`
- `MAX_RETRIES`
- `convert`
- `batch_convert`



```rust
pub trait DefaultImpl { /* ... */ }
```

### Methods

- `has_default`



```rust
pub trait Display { /* ... */ }
```

### Methods

- `fmt`



```rust
pub trait ExtensionTrait { /* ... */ }
```

### Methods

- `extension_method`



```rust
pub trait FromIterator { /* ... */ }
```

### Methods

- `from_iter`



```rust
pub trait GenericTrait { /* ... */ }
```

### Methods

- `method`



```rust
pub trait Iterator { /* ... */ }
```

### Methods

- `Item`
- `next`
- `size_hint`
- `count`



```rust
pub trait Sealed { /* ... */ }
```



<RustCode code={`pub struct SealedType;`} links={[]} />

**Unit Struct**

**Traits:** Sealed



```rust
pub trait SuperTrait { /* ... */ }
```

### Methods

- `super_method`



---

# Module: `test_crate::traits::private`

```rust
pub trait SealedTrait { /* ... */ }
```



---

# Module: `test_crate::types`

<RustCode code={`pub struct Container<T> {
    pub items: Vec<T>,
}`} links={[{"text": "Vec", "href": "https://doc.rust-lang.org/alloc/vec/struct.Vec.html"}]} />

A generic container for items of type `T`.

# Examples

```
use test_crate::types::Container;

let mut container = Container::<i32>::new();
container.add(42);
assert_eq!(container.len(), 1);
```

### Generic Parameters

- T

### Fields

<RustCode inline code={`items: Vec<T>`} links={[{"text": "Vec", "href": "https://doc.rust-lang.org/alloc/vec/struct.Vec.html"}]} />


### Methods

<RustCode inline code={`fn new() -> Self`} links={[]} />

Creates a new empty container.

---

<RustCode inline code={`fn add(self: & mut Self, item: T)`} links={[]} />

Adds an item to the container.

---

<RustCode inline code={`fn len(self: &Self) -> usize`} links={[]} />

Returns the number of items in the container.

---

<RustCode inline code={`fn is_empty(self: &Self) -> bool`} links={[]} />

Returns `true` if the container is empty.

---

<RustCode inline code={`fn iter(self: &Self) -> Iter<T>`} links={[{"text": "Iter", "href": "https://doc.rust-lang.org/core/slice/iter/struct.Iter.html"}]} />

Returns an iterator over the items.

---

<RustCode inline code={`fn process_with_options<F>(
    self: &Self,
    filter_fn: F,
    transform_map: HashMap<String, String>,
    options: Vec<(String, String)>,
    timeout_ms: u64
) -> Result<Vec<String>, String>`} links={[{"text": "HashMap", "href": "https://doc.rust-lang.org/std/collections/hash/map/struct.HashMap.html"}, {"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}, {"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}, {"text": "Vec", "href": "https://doc.rust-lang.org/alloc/vec/struct.Vec.html"}, {"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}, {"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}, {"text": "Result", "href": "https://doc.rust-lang.org/std/result/enum.Result.html"}, {"text": "Vec", "href": "https://doc.rust-lang.org/alloc/vec/struct.Vec.html"}, {"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}, {"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}]} />

Processes items with complex filtering and transformation options.

---

### Trait Implementations

#### Default

<RustCode inline code={`fn default() -> Self`} links={[]} />

---

#### FromIterator

<RustCode inline code={`fn from_iter<I>(iter: I) -> Self`} links={[]} />

---



## test_crate::types::DEFAULT_CAPACITY

*Constant*

The default capacity for containers.



## test_crate::types::MAX_RETRIES

*Constant*

The maximum number of retries.



## test_crate::types::Map

*Type Alias*: `[HashMap](https://doc.rust-lang.org/std/collections/hash/map/struct.HashMap.html)<K, V>`

A type alias for a generic key-value map.



<RustCode code={`pub struct Pair<T, U> {
    pub first: T,
    pub second: U,
}`} links={[]} />

A pair of related values.

### Generic Parameters

- T
- U

### Fields

<RustCode inline code={`first: T`} links={[]} />

<RustCode inline code={`second: U`} links={[]} />


### Methods

<RustCode inline code={`fn new(first: T, second: U) -> Self`} links={[]} />

Creates a new pair.

---

<RustCode inline code={`fn swap(self: Self) -> Pair<U, T>`} links={[{"text": "Pair", "href": "/test_crate/types/struct.Pair"}]} />

Swaps the values in the pair.

---

**Traits:** Eq, Copy

### Trait Implementations

#### Clone

<RustCode inline code={`fn clone(self: &Self) -> Pair<T, U>`} links={[{"text": "Pair", "href": "/test_crate/types/struct.Pair"}]} />

---

#### Debug

<RustCode inline code={`fn fmt(self: &Self, f: & mut Formatter) -> Result`} links={[{"text": "Formatter", "href": "https://doc.rust-lang.org/core/fmt/struct.Formatter.html"}, {"text": "Result", "href": "https://doc.rust-lang.org/std/result/enum.Result.html"}]} />

---

#### From

<RustCode inline code={`fn from((first, second): (T, U)) -> Self`} links={[]} />

---

#### PartialEq

<RustCode inline code={`fn eq(self: &Self, other: &Pair<T, U>) -> bool`} links={[{"text": "Pair", "href": "/test_crate/types/struct.Pair"}]} />

---



<RustCode code={`pub struct RefStruct<'a> {
    pub data: &'a str,
}`} links={[]} />

A struct with a lifetime parameter.

Demonstrates borrowing data with an explicit lifetime.

### Generic Parameters

- 'a

### Fields

<RustCode inline code={`data: &'a str`} links={[]} />


### Methods

<RustCode inline code={`fn new(data: &'a str) -> Self`} links={[]} />

Creates a new `RefStruct` from borrowed data.

---

<RustCode inline code={`fn get(self: &Self) -> &'a str`} links={[]} />

Returns the borrowed data.

---



<RustCode code={`pub enum Status {
    Idle,
    Running { progress: f32 },
    Completed,
    Failed { error: String },
}`} links={[{"text": "String", "href": "https://doc.rust-lang.org/alloc/string/struct.String.html"}]} />

Represents the status of an operation.

This enum demonstrates:
- Unit variants
- Struct variants with named fields
- Multiple variant types in one enum

### Variants

- `Idle` - The operation is idle and waiting to start.
- `Running{ progress: f32 }` - The operation is running with progress information.
- `Completed` - The operation completed successfully.
- `Failed{ error: String }` - The operation failed with an error message.

### Methods

<RustCode inline code={`fn is_running(self: &Self) -> bool`} links={[]} />

Returns `true` if the status is `Running`.

---

<RustCode inline code={`fn is_completed(self: &Self) -> bool`} links={[]} />

Returns `true` if the status is `Completed`.

---

<RustCode inline code={`fn progress(self: &Self) -> Option<f32>`} links={[{"text": "Option", "href": "https://doc.rust-lang.org/std/option/enum.Option.html"}]} />

Returns the progress if the status is `Running`.

---

### Trait Implementations

#### Clone

<RustCode inline code={`fn clone(self: &Self) -> Status`} links={[{"text": "Status", "href": "/test_crate/types/enum.Status"}]} />

---

#### Debug

<RustCode inline code={`fn fmt(self: &Self, f: & mut Formatter) -> Result`} links={[{"text": "Formatter", "href": "https://doc.rust-lang.org/core/fmt/struct.Formatter.html"}, {"text": "Result", "href": "https://doc.rust-lang.org/std/result/enum.Result.html"}]} />

---

#### Default

<RustCode inline code={`fn default() -> Self`} links={[]} />

---

#### PartialEq

<RustCode inline code={`fn eq(self: &Self, other: &Status) -> bool`} links={[{"text": "Status", "href": "/test_crate/types/enum.Status"}]} />

---



## test_crate::types::StringMap

*Type Alias*: `[HashMap](https://doc.rust-lang.org/std/collections/hash/map/struct.HashMap.html)<[String](https://doc.rust-lang.org/alloc/string/struct.String.html), [String](https://doc.rust-lang.org/alloc/string/struct.String.html)>`

A type alias for a string-to-string map.

Commonly used for configuration and metadata.



---
