// This file is auto-generated by cargo-doc-md
// Do not edit manually - this file will be regenerated

import type {SidebarsConfig} from '@docusaurus/plugin-content-docs';

// Rust API documentation sidebars
// Each module has its own sidebar for better navigation
// Import this in your docusaurus.config.ts:
// import { rustSidebars } from './sidebars-rust';
//
// Then configure in docs plugin:
// docs: {
//   sidebarPath: './sidebars.ts',
//   async sidebarItemsGenerator({ defaultSidebarItemsGenerator, ...args }) {
//     const items = await defaultSidebarItemsGenerator(args);
//     const docPath = args.item.id;
//     // Use module-specific sidebar if available
//     for (const [path, sidebar] of Object.entries(rustSidebars)) {
//       if (docPath.startsWith(path + '/')) {
//         return sidebar;
//       }
//     }
//     return items;
//   },
// }

export const rustSidebars: Record<string, any[]> = {
  'test_crate': [
    {
      type: 'category',
      label: 'Modules',
      collapsed: true,
      items: [
        'test_crate/async_example/index',
        'test_crate/errors/index',
        'test_crate/functions/index',
        'test_crate/lifetimes/index',
        'test_crate/nested/index',
        'test_crate/patterns/index',
        'test_crate/traits/index',
        'test_crate/types/index',
      ],
    },
    {
      type: 'category',
      label: 'Structs',
      collapsed: true,
      items: [
        'test_crate/struct.BoundedGeneric',
        'test_crate/struct.Error',
        'test_crate/struct.GenericStruct',
        'test_crate/struct.PlainStruct',
        'test_crate/struct.TupleStruct',
        'test_crate/struct.UnitStruct',
      ],
    },
    {
      type: 'category',
      label: 'Enums',
      collapsed: true,
      items: [
        'test_crate/enum.ComplexEnum',
        'test_crate/enum.GenericEnum',
        'test_crate/enum.SimpleEnum',
      ],
    },
    {
      type: 'category',
      label: 'Traits',
      collapsed: true,
      items: [
        'test_crate/trait.DisplayDebug',
        'test_crate/trait.MyTrait',
      ],
    },
    {
      type: 'category',
      label: 'Functions',
      collapsed: true,
      items: [
        'test_crate/fn.const_function',
        'test_crate/fn.function_with_args',
        'test_crate/fn.function_with_result',
        'test_crate/fn.generic_function',
        'test_crate/fn.multiple_bounds',
        'test_crate/fn.simple_function',
        'test_crate/fn.unsafe_function',
      ],
    },
    {
      type: 'category',
      label: 'Type Aliases',
      collapsed: true,
      items: [
        'test_crate/type.GenericResult',
        'test_crate/type.Result',
      ],
    },
    {
      type: 'category',
      label: 'Constants',
      collapsed: true,
      items: [
        'test_crate/constant.MAX_SIZE',
        'test_crate/constant.MIN_SIZE',
        'test_crate/constant.VERSION',
      ],
    },
  ],
  'test_crate/async_example': [
    'test_crate::async_example/index',
    {
      type: 'category',
      label: 'Structs',
      collapsed: true,
      items: [
        'test_crate::async_example/struct.AsyncCounter',
        'test_crate::async_example/struct.AsyncStruct',
      ],
    },
    {
      type: 'category',
      label: 'Traits',
      collapsed: true,
      items: [
        'test_crate::async_example/trait.AsyncIterator',
        'test_crate::async_example/trait.AsyncTrait',
      ],
    },
    {
      type: 'category',
      label: 'Functions',
      collapsed: true,
      items: [
        'test_crate::async_example/fn.async_with_args',
        'test_crate::async_example/fn.boxed_future',
        'test_crate::async_example/fn.generic_async',
        'test_crate::async_example/fn.returns_future',
        'test_crate::async_example/fn.simple_async',
      ],
    },
  ],
  'test_crate/errors': [
    'test_crate::errors/index',
    {
      type: 'category',
      label: 'Structs',
      collapsed: true,
      items: [
        'test_crate::errors/struct.ErrorContext',
      ],
    },
    {
      type: 'category',
      label: 'Enums',
      collapsed: true,
      items: [
        'test_crate::errors/enum.CustomError',
      ],
    },
    {
      type: 'category',
      label: 'Traits',
      collapsed: true,
      items: [
        'test_crate::errors/trait.IntoContext',
      ],
    },
    {
      type: 'category',
      label: 'Functions',
      collapsed: true,
      items: [
        'test_crate::errors/fn.chain_errors',
        'test_crate::errors/fn.fallible_operation',
        'test_crate::errors/fn.operation_with_context',
      ],
    },
    {
      type: 'category',
      label: 'Type Aliases',
      collapsed: true,
      items: [
        'test_crate::errors/type.Result',
      ],
    },
  ],
  'test_crate/functions': [
    'test_crate::functions/index',
    {
      type: 'category',
      label: 'Functions',
      collapsed: true,
      items: [
        'test_crate::functions/fn.add',
        'test_crate::functions/fn.async_function',
        'test_crate::functions/fn.complex_generics',
        'test_crate::functions/fn.const_function',
        'test_crate::functions/fn.filter',
        'test_crate::functions/fn.for_each',
        'test_crate::functions/fn.function_with_very_long_signature',
        'test_crate::functions/fn.higher_order_function',
        'test_crate::functions/fn.map',
        'test_crate::functions/fn.multiply',
        'test_crate::functions/fn.process_mut_slice',
        'test_crate::functions/fn.process_slice',
        'test_crate::functions/fn.unsafe_function',
      ],
    },
  ],
  'test_crate/lifetimes': [
    'test_crate::lifetimes/index',
    {
      type: 'category',
      label: 'Structs',
      collapsed: true,
      items: [
        'test_crate::lifetimes/struct.BorrowedData',
        'test_crate::lifetimes/struct.DoubleBorrow',
        'test_crate::lifetimes/struct.LifetimeStruct',
        'test_crate::lifetimes/struct.LifetimeWithBound',
      ],
    },
    {
      type: 'category',
      label: 'Enums',
      collapsed: true,
      items: [
        'test_crate::lifetimes/enum.LifetimeEnum',
      ],
    },
    {
      type: 'category',
      label: 'Traits',
      collapsed: true,
      items: [
        'test_crate::lifetimes/trait.LifetimeTrait',
      ],
    },
    {
      type: 'category',
      label: 'Functions',
      collapsed: true,
      items: [
        'test_crate::lifetimes/fn.higher_ranked_trait_bound',
        'test_crate::lifetimes/fn.lifetime_function',
        'test_crate::lifetimes/fn.multiple_lifetimes',
      ],
    },
  ],
  'test_crate/nested': [
    'test_crate::nested/index',
    {
      type: 'category',
      label: 'Modules',
      collapsed: true,
      items: [
        'test_crate::nested/inner/index',
        'test_crate::nested/reexport_test/index',
      ],
    },
    {
      type: 'category',
      label: 'Structs',
      collapsed: true,
      items: [
        'test_crate::nested/struct.OuterStruct',
      ],
    },
  ],
  'test_crate/nested/inner': [
    'test_crate::nested::inner/index',
    {
      type: 'category',
      label: 'Modules',
      collapsed: true,
      items: [
        'test_crate::nested::inner/deep/index',
      ],
    },
    {
      type: 'category',
      label: 'Structs',
      collapsed: true,
      items: [
        'test_crate::nested::inner/struct.InnerStruct',
      ],
    },
    {
      type: 'category',
      label: 'Functions',
      collapsed: true,
      items: [
        'test_crate::nested::inner/fn.inner_function',
      ],
    },
  ],
  'test_crate/nested/inner/deep': [
    'test_crate::nested::inner::deep/index',
    {
      type: 'category',
      label: 'Modules',
      collapsed: true,
      items: [
        'test_crate::nested::inner::deep/deeper/index',
      ],
    },
    {
      type: 'category',
      label: 'Structs',
      collapsed: true,
      items: [
        'test_crate::nested::inner::deep/struct.DeepStruct',
      ],
    },
    {
      type: 'category',
      label: 'Functions',
      collapsed: true,
      items: [
        'test_crate::nested::inner::deep/fn.deep_function',
      ],
    },
  ],
  'test_crate/nested/inner/deep/deeper': [
    'test_crate::nested::inner::deep::deeper/index',
    {
      type: 'category',
      label: 'Structs',
      collapsed: true,
      items: [
        'test_crate::nested::inner::deep::deeper/struct.DeeperStruct',
      ],
    },
  ],
  'test_crate/nested/reexport_test': [
    'test_crate::nested::reexport_test/index',
    {
      type: 'category',
      label: 'Modules',
      collapsed: true,
      items: [
        'test_crate::nested::reexport_test/items/index',
      ],
    },
    {
      type: 'category',
      label: 'Structs',
      collapsed: true,
      items: [
        'test_crate::nested::reexport_test/struct.GlobStruct',
      ],
    },
    {
      type: 'category',
      label: 'Enums',
      collapsed: true,
      items: [
        'test_crate::nested::reexport_test/enum.GlobEnum',
      ],
    },
    {
      type: 'category',
      label: 'Functions',
      collapsed: true,
      items: [
        'test_crate::nested::reexport_test/fn.glob_function',
      ],
    },
  ],
  'test_crate/nested/reexport_test/items': [
    'test_crate::nested::reexport_test::items/index',
    {
      type: 'category',
      label: 'Structs',
      collapsed: true,
      items: [
        'test_crate::nested::reexport_test::items/struct.GlobStruct',
      ],
    },
    {
      type: 'category',
      label: 'Enums',
      collapsed: true,
      items: [
        'test_crate::nested::reexport_test::items/enum.GlobEnum',
      ],
    },
    {
      type: 'category',
      label: 'Functions',
      collapsed: true,
      items: [
        'test_crate::nested::reexport_test::items/fn.glob_function',
      ],
    },
  ],
  'test_crate/patterns': [
    'test_crate::patterns/index',
    {
      type: 'category',
      label: 'Structs',
      collapsed: true,
      items: [
        'test_crate::patterns/struct.Builder',
        'test_crate::patterns/struct.Built',
        'test_crate::patterns/struct.Closed',
        'test_crate::patterns/struct.Handle',
        'test_crate::patterns/struct.Newtype',
        'test_crate::patterns/struct.Open',
        'test_crate::patterns/struct.TypeState',
        'test_crate::patterns/struct.Visitor',
      ],
    },
  ],
  'test_crate/traits': [
    'test_crate::traits/index',
    {
      type: 'category',
      label: 'Structs',
      collapsed: true,
      items: [
        'test_crate::traits/struct.AssociatedImpl',
        'test_crate::traits/struct.SealedType',
      ],
    },
    {
      type: 'category',
      label: 'Traits',
      collapsed: true,
      items: [
        'test_crate::traits/trait.Associated',
        'test_crate::traits/trait.ComplexBounds',
        'test_crate::traits/trait.Converter',
        'test_crate::traits/trait.DefaultImpl',
        'test_crate::traits/trait.Display',
        'test_crate::traits/trait.ExtensionTrait',
        'test_crate::traits/trait.FromIterator',
        'test_crate::traits/trait.GenericTrait',
        'test_crate::traits/trait.Iterator',
        'test_crate::traits/trait.Sealed',
        'test_crate::traits/trait.SuperTrait',
      ],
    },
  ],
  'test_crate/traits/private': [
    'test_crate::traits::private/index',
    {
      type: 'category',
      label: 'Traits',
      collapsed: true,
      items: [
        'test_crate::traits::private/trait.SealedTrait',
      ],
    },
  ],
  'test_crate/types': [
    'test_crate::types/index',
    {
      type: 'category',
      label: 'Structs',
      collapsed: true,
      items: [
        'test_crate::types/struct.Container',
        'test_crate::types/struct.Pair',
        'test_crate::types/struct.RefStruct',
      ],
    },
    {
      type: 'category',
      label: 'Enums',
      collapsed: true,
      items: [
        'test_crate::types/enum.Status',
      ],
    },
    {
      type: 'category',
      label: 'Type Aliases',
      collapsed: true,
      items: [
        'test_crate::types/type.Map',
        'test_crate::types/type.StringMap',
      ],
    },
    {
      type: 'category',
      label: 'Constants',
      collapsed: true,
      items: [
        'test_crate::types/constant.DEFAULT_CAPACITY',
        'test_crate::types/constant.MAX_RETRIES',
      ],
    },
  ],
};

// Main API documentation sidebar (for backward compatibility)
export const rustApiDocumentation = rustSidebars['test_crate'];

// Or use as a single category:
export const rustApiCategory = {
  type: 'category' as const,
  label: 'API Documentation',
  collapsed: false,
  items: rustApiDocumentation,
};
